// expect to find 'getArity()', 'getChild(int)', 'getOpcode()' in the node
// IRTreeNode

// as prefix of generated MC nodes
.target X64

.mc_cond_jump je jne jl jge jle jg
.mc_uncond_jump jmp
.mc_ret ret
.mc_mov mov cmovlt cmovgt cmoveq

stmt : PSEUDO_ASSIGN(reg op)
// mov
> mov P[1] -> P[0]
1

stmt : op
0

reg : op
0

op : BRANCH2(value label label)
// cmp, jcc
> cmp P[0] $1
> je  P[1]
> jne P[2]
2

op : BRANCH2(cmpSltRes label label)
// cmp, jcc
> jl  P[1]
> jge P[2]
1

op : BRANCH2(cmpSgtRes label label)
// cmp, jcc
> jg  P[1]
> jle P[2]
1

op : BRANCH2(cmpEqRes label label)
// jcc
> je  P[1]
> jne P[2]
1

cmpSltRes : SLT(value value)
> cmp P[0] P[1]
1

cmpSgtRes : SGT(value value)
> cmp P[0] P[1]
1

cmpEqRes: EQ(value value)
> cmp P[0] P[1]
1

op : SLT(value value)
// mov cmp cmov
> mov $0 -> %res_reg
> cmp P[0] P[1]
> cmovlt $1 -> %res_reg
3

op : SGT(value value)
// mov cmp cmov
> mov $0 -> %res_reg
> cmp P[0] P[1]
> cmovgt $1 -> %res_reg
3

op : EQ(value value)
// mov cmp cmov
> mov $0 -> %res_reg
> cmp P[0] P[1]
> cmoveq $0 -> %res_reg
3

op : RET2(value)
// mov, ret
> mov P[0] -> %ret_reg[0]
> ret
2

op : PARAM
// mov
> mov %param_reg[P(InstParam).getIndex()] -> %res_reg
1

op : SREM(value value)
// mov, div, mov
> mov P[0] -> %rax
> idiv P[1] -> %rdx
> mov %rdx -> %res_reg
3

op : PHI(value label value label)
> mcphi P[0] P[1] P[2] P[3] -> %res_reg
1

op : ADD(value value)
// add
> mov P[0] -> %res_reg
> add %res_reg P[1] -> %res_reg
2

value : reg
0

value : INT_IMM
0

reg : REG
0

label : LABEL
0