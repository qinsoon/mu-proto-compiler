// expect to find 'getArity()', 'getChild(int)', 'getOpcode()' in the node
// IRTreeNode

// as prefix of generated MC nodes
.target X64

// first one must be jump-equal
.mc_cond_jump {je jne} {jl jge} {jle jg} {jb jae}
.mc_uncond_jump jmp
.mc_ret ret
.mc_mov mov cmovlt cmovgt cmoveq movsd movss movapd movaps
.mc_dpmov movsd
.mc_spmov movss
.mc_phi imcphi dpmcphi spmcphi
.mc_nop nop
.mc_call call
.mc_cmp cmp

.inst_ptr rip
.stack_ptr rsp
.frame_ptr rbp

// registers
// use r15 for local thread pointer
.gpr rax rbx rcx rdx rdi rsi r8 r9 r10 r11 r12 r13 r14 r15
.gpr_param rdi rsi rdx rcx r8 r9
.gpr_ret rax rdx

.fp_reg xmm0 xmm1 xmm2 xmm3 xmm4 xmm5 xmm6 xmm7 xmm8 xmm9 xmm10 xmm11 xmm12 xmm13 xmm14 xmm15
.fp_reg_param xmm0 xmm1 xmm2 xmm3 xmm4 xmm5 xmm6 xmm7
.fp_reg_ret xmm0 xmm1

.callee_save rbx rbp r12 r13 r14 r15

// _|_|_|_|  _|      _|  _|_|_|  _|_|_|_|_|      _|_|_|    _|    _|  _|        _|_|_|_|    _|_|_|
// _|        _|_|  _|_|    _|        _|          _|    _|  _|    _|  _|        _|        _|      
// _|_|_|    _|  _|  _|    _|        _|          _|_|_|    _|    _|  _|        _|_|_|      _|_|  
// _|        _|      _|    _|        _|          _|    _|  _|    _|  _|        _|              _|
// _|_|_|_|  _|      _|  _|_|_|      _|          _|    _|    _|_|    _|_|_|_|  _|_|_|_|  _|_|_|  
// generated from http://www.kammerl.de/ascii/AsciiSignature.php

stmt : NOP
> nop
0

// ********************************
// PSEUDO OP 
// ********************************

// TODO: we need to know if PARAM is fp or int
ireg : PARAM_GPR
// mov
> mov %param_reg[P(InstParam).getIndex()] -> %res_reg
1

dpreg : PARAM_DP
// mov
> mov %param_reg[P(InstParam).getIndex()] -> %res_reg
1

spreg : PARAM_SP
// mov
> mov %param_reg[P(InstParam).getIndex()] -> %res_reg
1

ireg : PHI(ivalue label ivalue label)
> imcphi P[0] P[1] P[2] P[3] -> %res_reg
1

dpreg : PHI(dpvalue label dpvalue label)
> dpmcphi P[0] P[1] P[2] P[3] -> %res_reg
1

spreg : PHI(spvalue label spvalue label)
> spmcphi P[0] P[1] P[2] P[3] -> %res_reg
1

stmt : PSEUDO_ASSIGN(ireg op)
// mov
> mov P[1] -> P[0]
1

stmt : PSEUDO_ASSIGN(dpreg op)
> movsd P[1] -> P[0]
1

stmt : op
0

// ********************************
// BRANCH CODE
// ********************************

op : BRANCH(label)
> jmp P[0]
1

op : BRANCH2(ivalue label label)
// cmp, jcc
> test P[0] $1
> je  P[1]
> jmp P[2]
2

op : BRANCH2(cmpSltRes label label)
// cmp, jcc
> jl  P[1]
> jmp P[2]
1

op : BRANCH2(cmpSleRes label label)
> jle P[1]
> jmp P[2]
1

op : BRANCH2(cmpSgtRes label label)
// cmp, jcc
> jg  P[1]
> jmp P[2]
1

op : BRANCH2(cmpSgeRes label label)
> jge P[1]
> jmp P[2]
1

op : BRANCH2(cmpEqRes label label)
// jcc
> je  P[1]
> jmp P[2]
1

op : BRANCH2(cmpFoltRes label label)
> jb P[1]
> jmp P[2]
1

op : BRANCH2(cmpFogeRes label label)
> jae P[1]
> jmp P[2]
1

op : BRANCH2(cmpFuneRes label label)
> jne P[1]
> jmp P[2]
1

op : RET(ivalue)
// mov, ret
> mov P[0] -> %ret_reg[0]
> ret
2

op : RETVOID
> ret
1

// ********************************
// SLT 
// ********************************

// 2nd op should always be reg
cmpSltRes : SLT(ireg iimm)
> cmp P[1] P[0]
1

cmpSgeRes : SLT(iimm ireg)
> cmp P[0] P[1]
1

cmpSltRes : SLT(ireg ireg)
> cmp P[1] P[0]
1

cmpSltRes : SLT(iimm iimm)
> mov P[0] -> %tmp_reg[0]
> cmp P[1] %tmp_reg[0]
2

// ********************************
// SLE 
// ********************************

// 2nd op should always be reg
cmpSleRes : SLE(ireg iimm)
> cmp P[1] P[0]
1

cmpSgtRes : SLE(iimm ireg)
> cmp P[0] P[1]
1

cmpSleRes : SLE(ireg ireg)
> cmp P[1] P[0]
1

cmpSleRes : SLE(iimm iimm)
> mov P[0] -> %tmp_reg[0]
> cmp P[1] %tmp_reg[0]
2

// ********************************
// FOLT
// ********************************

cmpFoltRes : FOLT(REG_DP FP_DP_IMM)
> comisd P[1] P[0]
1

cmpFogeRes : FOLT(FP_DP_IMM REG_DP)
> comisd P[0] P[1]
1

cmpFoltRes : FOLT(REG_DP REG_DP)
> comisd P[1] P[0]
1

cmpFoltRes : FOLT(FP_DP_IMM FP_DP_IMM)
> movsd P[0] -> %tmp_reg[0]
> comisd P[1] %tmp_reg[0]
2

// ********************************
// FUNE
// ********************************

cmpFuneRes : FUNE(dpreg FP_DP_IMM)
> ucomisd P[1] P[0]
1

cmpFuneRes : FUNE(FP_DP_IMM dpreg)
> ucomisd P[0] P[1]
1

cmpFuneRes : FUNE(dpreg dpreg)
> ucomisd P[0] P[1]
1

// ********************************
// SGT
// ********************************

cmpSgtRes : SGT(ireg iimm)
> cmp P[1] P[0]
1

cmpSleRes : SGT(iimm ireg)
> cmp P[0] P[1]
1

cmpSgtRes : SGT(ireg ireg)
> cmp P[1] P[0]
1

cmpSgtRes : SGT(iimm iimm)
> mov P[0] -> %tmp_reg[0]
> cmp P[1] %tmp_reg[0]
2

// ********************************
// EQ 
// ********************************

cmpEqRes: EQ(ireg ireg)
> cmp P[0] P[1]
1

cmpEqRes: EQ(iimm ireg)
> cmp P[0] P[1]
1

cmpEqRes: EQ(ireg iimm)
> cmp P[1] P[0]
1

cmpEqRes: EQ(iimm iimm)
> mov P[1] -> %tmp_reg[0]
> cmp P[0] %tmp_reg[0]
2

// ********************************
// BIN OP 
// ********************************

ireg : SREM(ivalue ireg)
// mov, div, mov
> xor %rdx %rdx -> %rdx
> mov P[0] -> %rax
> idiv P[1] -> %rdx
> mov %rdx -> %res_reg
4

ireg : SREM(ivalue iimm)
// mov mov div mov
> xor %rdx %rdx -> %rdx
> mov P[0] -> %rax
> mov P[1] -> %tmp_reg[0]
> idiv %tmp_reg[0] -> %rdx
> mov %rdx -> %res_reg
5

ireg : SDIV(ivalue ireg)
> xor %rdx %rdx -> %rdx
> mov P[0] -> %rax
> idiv P[1] -> %rax
> mov %rax -> %res_reg
4

ireg : SDIV(ivalue iimm)
> xor %rdx %rdx -> %rdx
> mov P[0] -> %rax
> mov P[1] -> %tmp_reg[0]
> idiv %tmp_reg[0] -> %rax
> mov %rax -> %res_reg
5

ireg : MUL(ivalue ivalue)
> mov P[0] -> %rax
> mul P[1] -> %rax
> mov %rax -> %res_reg
3

ireg : ADD(ivalue ivalue)
// add
> mov P[0] -> %res_reg
> add %res_reg P[1] -> %res_reg
2

ireg : SUB(ivalue ivalue)
// sub
> mov P[0] -> %res_reg
> sub %res_reg P[1] -> %res_reg
2

ireg : SHL(ivalue ireg)
// shl
> mov P[0] -> %res_reg
> mov P[1] -> %rcx
> shl_cl %res_reg -> %res_reg
3

ireg : SHL(ivalue iimm)
// shl
> mov P[0] -> %res_reg
> shl_imm %res_reg P[1] -> %res_reg
2

// ********************************
// FLOATING POINT
// ********************************

dpreg : FADD(dpvalue dpvalue)
> movsd P[0] -> %res_reg
> addsd %res_reg P[1] -> %res_reg
2

dpreg : FDIV(dpvalue dpvalue)
> movsd P[0] -> %res_reg
> divsd %res_reg P[1] -> %res_reg
2

dpreg : SITOFP(ivalue)
> cvtsi2sd P[0] -> %res_reg
1

ireg : FPTOSI(dpvalue)
> cvtsd2si P[0] -> %res_reg
1

// ********************************
// CALLs
// ********************************

op : CALL(label)
> call P[0] -> %res_reg
5

ireg : CALL(label)
> call P[0] -> %res_reg
6

op : CCALL(label)
> call P[0] -> %res_reg
5

ireg : CCALL(label)
> call P[0] -> %res_reg
6

// ********************************
// MEMORY ALLOCATION / ACCESS
// ********************************


// alloca

ireg : ALLOCA(iimm)
> sub %rsp P[0] -> %rsp
> mov %rsp -> %res_reg
2

op : ALLOCA(iimm)
> sub %rsp P[0] -> %rsp
> mov %rsp -> %res_reg
2

// load/store

ireg : LOADINT(ireg)
> load_mov *(P[0] + $0 + $0 x $0) -> %res_reg
1

dpreg : LOADDP(ireg)
> load_movsd *(P[0] + $0 + $0 x $0) -> %res_reg
1

op : STORE(ireg ivalue)
> store_mov *(P[0] + $0 + $0 x $0) P[1]
1

op : STORE(ireg dpreg)
> store_movsd *(P[0] + $0 + $0 x $0) P[1]
1

op : STORE(ireg fpimm)
> movsd P[1] -> %tmp_reg[0]
> store_movsd *(P[0] + $0 + $0 x $0) %tmp_reg[0]
2

// getiref

ireg : GETIREF(ireg iimm)
> mov P[0] -> %tmp_reg[0]
> add %tmp_reg[0] P[1] -> %tmp_reg[0]
> mov %tmp_reg[0] -> %res_reg
3

// struct

ireg : GETFIELD(ireg iimm)
> mov P[0] -> %tmp_reg[0]
> add %tmp_reg[0] P[1] -> %tmp_reg[0]
> mov %tmp_reg[0] -> %res_reg
3

getFieldReg : GETFIELD(ireg iimm)
> nop	// intentionally keeping this - explicitly emit an nop, otherwise my compiler would emit regular sequence
0

ireg : LOADINT(getFieldReg)
> load_mov *(P[0][0] + P[0][1] + $0 x $0) -> %res_reg
1

dpreg : LOADDP(getFieldReg)
> load_movsd *(P[0][0] + P[0][1] + $0 x $0) -> %res_reg
1

// array

ireg : GETELEM_CONST(ireg iimm)
> lea *(P[0] + P[1] + $0 x $0) -> %res_reg
1

getElemRegConst : GETELEM_CONST(ireg iimm)
> nop
0

ireg : LOADINT(getElemRegConst)
> load_mov *(P[0][0] + P[0][1] + $0 x $0) -> %res_reg
1

dpreg : LOADDP(getElemRegConst)
> load_movsd *(P[0][0] + P[0][1] + $0 x $0) -> %res_reg
1

op : STORE(getElemRegConst ivalue)
> store_mov *(P[0][0] + P[0][1] + $0 x $0) P[1]
1

ireg : GETELEM_VAR(ireg ireg iimm)
> lea *(P[0] + $0 + P[1] x P[2]) -> %res_reg
1

getElemRegVar: GETELEM_VAR(ireg ireg iimm)
> nop
0

ireg : LOADINT(getElemRegVar)
> load_mov *(P[0][0] + $0 + P[0][1] x P[0][2]) -> %res_reg
1

dpreg : LOADDP(getElemRegVar)
> load_movsd *(P[0][0] + $0 + P[0][1] x P[0][2]) -> %res_reg
1

op : STORE(getElemRegVar ivalue)
> store_mov *(P[0][0] + $0 + P[0][1] x P[0][2]) P[1]
1

op : STORE(getElemRegVar dpvalue)
> store_movsd *(P[0][0] + $0 + P[0][1] x P[0][2]) P[1]
1

// ********************************
// INTERNAL
// ********************************

ireg : IREF_OFFSET(ireg iimm)
> mov P[0] -> %tmp_reg[0]
> add %tmp_reg[0] P[1] -> %tmp_reg[0]
> mov %tmp_reg[0] -> %res_reg
3

getFieldReg : IREF_OFFSET(ireg iimm)
> nop	// keeping this
0

// ********************************
// NON-EMIT RULEs
// ********************************

value : reg
0

value : imm
0

value : ivalue
0

value : spvalue
0

value :dpvalue
0

ivalue : ireg
0

ivalue : INT_IMM
0

spvalue : spreg
0

spvalue : FP_SP_IMM
0

dpvalue : dpreg
0

dpvalue : FP_DP_IMM
0

op : reg
0

reg : ireg
0

reg: spreg
0

reg : dpreg
0

imm : iimm
0

imm : fpimm
0

fpimm : FP_SP_IMM
0

fpimm : FP_DP_IMM
0

iimm : INT_IMM
0

ireg : REG_I1
0

ireg : REG_I8
0

ireg : REG_I16
0

ireg : REG_I32
0

ireg : REG_I64
0

spreg : REG_SP
0

dpreg : REG_DP
0

label : LABEL
0

//  _|_|_|_|   _|      _|   _|_|_|   _|_|_|_|_|         _|_|     _|_|_|  
//  _|         _|_|  _|_|     _|         _|           _|    _|   _|    _|
//  _|_|_|     _|  _|  _|     _|         _|           _|    _|   _|_|_|  
//  _|         _|      _|     _|         _|           _|    _|   _|      
//  _|_|_|_|   _|      _|   _|_|_|       _|             _|_|     _|      

.emit_op MCLabel = {
	"%s", P(MCLabel).getName();
}

.emit_op MCIntImmediate = {
	"$%s", P(MCIntImmediate).getValue();
}

.emit_op MCDPImmediate = {
	"$%s", P(MCDPImmediate).getValue();
}

.emit_op MCSPImmediate = {
	"$%s", P(MCSPImmediate).getValue();
}

.emit_op MCRegister = {
	"%%%s", P(MCRegister).REP().getName();
}

.emit_op MCLabeledMemoryOperand = {
	"%s(%%%s)", P(MCLabeledMemoryOperand).getDispLabel().getName(), P(MCMemoryOperand).getBase().REP().getName();
}

.emit_op MCDispMemoryOperand = {
	"%d(%%%s)", P(MCDispMemoryOperand).getDisp(), P(MCDispMemoryOperand).getBase().REP().getName();
}

.emit_op MCIndexedDispMemoryOperand = {
	"%d(%%%s, %%%s, %d)", P(MCIndexedDispMemoryOperand).getDisp(), P(MCIndexedDispMemoryOperand).getBase().REP().getName(), P(MCIndexedDispMemoryOperand).getIndex().REP().getName(), P(MCIndexedDispMemoryOperand).getScale();
}

// _|      _|    _|_|_|      _|_|_|    _|_|_|_|  _|_|_|_|  _|_|_|  _|      _|  _|_|_|_|
// _|_|  _|_|  _|            _|    _|  _|        _|          _|    _|_|    _|  _|      
// _|  _|  _|  _|            _|    _|  _|_|_|    _|_|_|      _|    _|  _|  _|  _|_|_|  
// _|      _|  _|            _|    _|  _|        _|          _|    _|    _|_|  _|      
// _|      _|    _|_|_|      _|_|_|    _|_|_|_|  _|        _|_|_|  _|      _|  _|_|_|_|

// ********************************
// MOV
// ********************************

.mc_def mov = {
	GPR = GPR/MEM;
	"movq %s,%s", OP[0], OP_REG;
}

.mc_def cmovlt = {
	GPR = GPR/MEM;
	"cmovltq %s,%s", OP[0], OP_REG;
}

.mc_def cmovgt = {
	GPR = GPR/MEM;
	"cmovgtq %s,%s", OP[0], OP_REG;
}

.mc_def cmoveq = {
	GPR = GPR/MEM;
	"cmoveqq %s,%s", OP[0], OP_REG;
}

.mc_def load_mov = {
	GPR = GPR/MEM;
	"movq %s,%s", OP[0], OP_REG;
}

.mc_def store_mov = {
	GPR/MEM GPR;
	"movq %s,%s", OP[1], OP[0];
}

.mc_def lea(1) = {
	GPR = GPR/MEM;
	"leaq %s,%s", OP[0], OP_REG;
}

// ********************************
// COMPARISON
// ********************************

.mc_def cmp = {
	GPR/MEM GPR;
	"cmpq %s,%s", OP[0], OP[1];
}

.mc_def test = {
	GPR/MEM GPR;
	"testq %s,%s", OP[0], OP[1];
}

// ********************************
// CALLS
// ********************************

.mc_def call = {
	"call %s", OP[0];
	uses: rdi(GPR) rsi(GPR) rdx(GPR) rcx(GPR) r8(GPR) r9(GPR) xmm0(DP) xmm1(DP) xmm2(DP) xmm3(DP) xmm4(DP) xmm5(DP) xmm6(DP) xmm7(DP);
}

.mc_def push(1) = {
	"pushq %s", OP[0];
}

.mc_def pop(1) = {
	"popq %s", OP[0];
}

// ********************************
// BRANCH
// ********************************

.mc_def jmp(1) = {
	"jmp %s", OP[0];
}

.mc_def je(1) = {
	"je %s", OP[0];
}

.mc_def jne(1) = {
	"jne %s", OP[0];
}

.mc_def jl(1) = {
	"jl %s", OP[0];
}

.mc_def jle(1) = {
	"jle %s", OP[0];
}

.mc_def jg(1) = {
	"jg %s", OP[0];
}

.mc_def jge(1) = {
	"jge %s", OP[0];
}

.mc_def jb(1) = {
	"jb %s", OP[0];
}

.mc_def jae(1) = {
	"jae %s", OP[0];
}

.mc_def ret = {
	"ret";
	uses: rax(GPR) rdx(GPR) xmm0(DP) xmm1(DP);
}

// ********************************
// BIN OP
// ********************************

.mc_def idiv = {
	GPR/MEM;
	"idivq %s", OP[0];
	uses: rax(GPR) rdx(GPR);
	defines: rax(GPR) rdx(GPR);
}

.mc_def mul = {
	GPR/MEM;
	"mulq %s", OP[0];
	uses: rax(GPR);
	defines: rax(GPR) rdx(GPR);
}

.mc_def add = {
	GPR = GPR GPR/MEM;
	"addq %s,%s", OP[1], OP[0];
}

.mc_def sub = {
	GPR = GPR GPR/MEM;
	"subq %s,%s", OP[1], OP[0];
}

.mc_def shl_cl(1) = {
	GPR = GPR/MEM;
	"shlq %%cl,%s", OP[0];
	uses: rcx(GPR);
}

.mc_def shl_imm = {
	GPR = GPR GPR/MEM;
	"shlq %s,%s", OP[1], OP[0];
}

.mc_def xor = {
	GPR = GPR GPR/MEM;
	"xorq %s,%s", OP[1], OP[0];
}

// ********************************
// FLOATING POINT
// ********************************

.mc_def movsd = {
	DP = DP/MEM;
	"movsd %s,%s", OP[0], OP_REG;
}

.mc_def store_movsd = {
	DP/MEM DP;
	"movsd %s,%s", OP[1], OP[0];
}

.mc_def load_movsd = {
	DP = DP/MEM;
	"movsd %s,%s", OP[0], OP_REG;	
}

.mc_def movapd = {
	DP = DP/MEM;
	"movapd %s,%s", OP[0], OP_REG;
}

.mc_def movss = {
	SP = SP/MEM;
	"movss %s,%s", OP[0], OP_REG;
}

.mc_def movaps = {
	SP = SP/MEM;
	"movaps %s,%s", OP[0], OP_REG;
}

.mc_def addsd = {
	DP = DP DP/MEM;
	"addsd %s,%s", OP[1], OP[0];
}

.mc_def divsd = {
	DP = DP DP/MEM;
	"divsd %s,%s", OP[1], OP[0];
}

.mc_def cvtsi2sd = {
	DP = GPR/MEM;
	"cvtsi2sd %s,%s", OP[0], OP_REG;
}

.mc_def cvtsd2si = {
	GPR = DP/MEM;
	"cvtsd2si %s,%s", OP[0], OP_REG;
}

.mc_def comisd = {
	DP/MEM DP;
	"comisd %s,%s", OP[0], OP[1];
}

.mc_def ucomisd = {
	DP/MEM DP;
	"ucomisd %s,%s", OP[0], OP[1];
}

// misc

.mc_def nop = {
	"nop";
}

.mc_def imcphi = {
	GPR = GPR OTH GPR OTH;
	"shouldnt emit";
}

.mc_def dpmcphi = {
	DP = DP OTH DP OTH;
	"shouldnt emit";
}

.mc_def spmcphi = {
	SP = SP OTH SP OTH;
	"shouldnt emit";
}

