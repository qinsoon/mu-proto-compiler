// expect to find 'getArity()', 'getChild(int)', 'getOpcode()' in the node
// IRTreeNode

// as prefix of generated MC nodes
.target X64

.mc_cond_jump je jne jl jge jle jg
.mc_uncond_jump jmp
.mc_ret ret
.mc_mov mov

stmt : PSEUDO_ASSIGN(reg op)
// mov
> mov P[0] P[1]
1

stmt : op
0

reg : op
0

op : BRANCH2(value label label)
// cmp, jcc
> cmp P[0] $1
> je  P[1]
> jne P[2]
2

op : BRANCH2(SLT(value value) label label)
// cmp, jcc
> jl  P[1]
> jge P[2]
2

op : BRANCH2(SGT(value value) label label)
// cmp, jcc
> jg  P[1]
> jle P[2]
2

op : BRANCH2(EQ(value value) label label)
// jcc
> je  P[1]
> jne P[2]
2

op : SLT(value value)
// mov cmp cmov
> mov %res_reg $0
> cmp P[0] P[1]
> cmovlt %res_reg $1
3

op : SGT(value value)
// mov cmp cmov
> mov %res_reg $0
> cmp P[0] P[1]
> cmovgt %res_reg $1
3

op : EQ(value value)
// mov cmp cmov
> mov %res_reg $0
> cmp P[0] P[1]
> cmoveq %res_reg $0
3

op : RET2(value)
// mov, ret
> mov %ret_reg[0] P[0]
> ret
2

op : PARAM
// mov
> mov %res_reg %param_reg[P(InstParam).getIndex()]
1

op : SREM(value value)
// mov, div, mov
> mov %rax P[0]
> idiv P[1]
> mov %res_reg %rdx
3

op : PHI(value label value label)
> mcphi P[0] P[1] P[2] P[3]
1

op : ADD(value value)
// add
> mov %res_reg P[0]
> add %res_reg P[1]
2

value : reg
0

value : INT_IMM
0

reg : REG
0

label : LABEL
0