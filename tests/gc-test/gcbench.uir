// gcbench
// from Hans Boehm's Java version
// http://hboehm.info/gc/gc_bench/applet/GCBench.java

.typedef @Node struct<ref<@Node> ref<@Node> int<64> int<64>>

.funcdef @initNode2 <void (ref<@Node> ref<@Node> ref<@Node>>)> {
	.label %entry:
	%this = PARAM 0
	%l = PARAM 1
	%r = PARAM 2
	%irefThis = GETIREF <@Node> %this
	
	%irefThisLeft = GETFIELDIREF <@Node 0> %irefThis
	STORE <ref<@Node>> %l %irefThisLeft
	
	%irefThisRight = GETFIELDIREF <@Node 1> %irefThis
	STORE <ref<@Node>> %r %irefThisRight
	
	BRANCH %ret
	
	.label %ret:
	RETVOID	
}

.const @kStretchTreeDepth   <int<64>> = 18
.const @kLongLivedTreeDepth	<int<64>> = 16
.const @kArraySize			<int<64>> = 500000
.const @kMinTreeDepth		<int<64>> = 4
.const @kMaxTreeDepth		<int<64>> = 16

.funcdef @TreeSize <int<64> (int<64>)> {
	.label %entry:
	%i = PARAM 0
	%i2 = ADD <int<64>> %i 1
	%i3 = SHL <int<64>> 1 %i2
	%i4 = SUB <int<64>> %i3 1
	BRANCH %ret
	
	.label %ret:
	RET <int<64>> %i4
}

.funcdef @NumIters <int<64> (int<64>)> {
	.label %entry:
	%i = PARAM0
	%i2 = CALL <int<64> (int<64>)> @TreeSize (@kStretchTreeDepth)
	%i3 = MUL <int<64>> 2 %i2
	%i4 = CALL <int<64> (int<64>)> @TreeSize (%i)
	%i5 = SDIV <int<64>> %i3 %i4
	BRANCH %ret
	
	.label %ret:
	RET <int<64>> %i5
}

.funcdef @Populate <void (int<64> ref<@Node>)> {
	.label %entry:
	%iDepth = PARAM 0
	%thisNode = PARAM 1
	BRANCH %if
	
	.label %if:
	%cond = SLE <int<64>> %iDepth 0
	BRANCH2 %cond %thenBlock %elseBlock
	
	.label %thenBlock:
	RETVOID
	
	.label %elseBlock:
	%iDepth2 = SUB <int<64>> iDepth 1
	
	// thisNode.left = new Node()
	%irefThisNode = GETIREF <@Node> %thisNode
	%irefThisNodeLeft = GETFIELDIREF <@Node 0> %irefThisNode
	%new1 = NEW <@Node>
	STORE <ref<@Node>> %new1 %irefThisNodeLeft
	
	// thisNode.right = new Node()
	%irefThisNodeRight = GETFIELDIREF <@Node 1> %irefThisNode
	%new2 = NEW <@Node>
	STORE <ref<@Node>> %new2 %irefThisNodeRight
	
	// Populate(iDepth, thisNode.left)
	CALL <void (int<64> ref<@Node>)> @Populate (%iDepth2 %new1)
	
	// Populate(iDepth, thisNode.right)
	CALL <void (int<64> ref<@Node>)> @Populate (%iDepth2 %new2)
	
	RETVOID
}

.funcdef @MakeTree <ref<@Node> (int<64>)> {
	.label %entry:
	%iDepth = PARAM 0
	%cond = SLE <int<64>> iDepth 0
	BRANCH2 %cond %thenBlock %elseBlock
	
	.label %thenBlock:
	%new1 = NEW <@Node>
	RET <ref<@Node>> @new1
	
	.label %elseBlock:
	%new2 = NEW <@Node>
	%iDepth2 = SUB <int<64>> %iDepth 1
	%ret1 = CALL <ref<@Node> (int<64>)> @MakeTree (%iDepth2)
	%ret2 = CALL <ref<@Node> (int<64>)> @MakeTree (%iDepth2)
	CALL <void (ref<@Node> ref<@Node> ref<@Node>)> @initNode2 (%new2 %ret1 %ret2)
	RET <ref<@Node>> @new2
}

.funcdef @TimeConstruction <void (int<64>)> {
	.label %entry:
	%depth = PARAM 0
	%iNumIters = CALL <int<64> (int<64>)> @NumInters(%depth)
	BRANCH %forLoop1
	
	.label %forLoop1:
	%i1 = PHI <int<64>> (%entry: 0; %forLoop1: %i1New;)
	%tempTree = NEW <@Node>
	CALL <void (int<64> ref<@Node>)> @Populate (%depth, %tempTree)
	%i1New = ADD <int<64>> %i1 1
	%forLoop1Cond = SLT <int<64>> %i1New %iNumIters
	BRANCH2 %forLoop1Cond %forLoop1 %afterForLoop1
	
	.label %afterForLoop1:
	BRANCH %forLoop2
	
	.label %forLoop2:
	%i2 = PHI <int<64>> (%afterForLoop1: 0; %forLoop2: %i2New;)
	%tempTree2 = CALL <ref<@Node> (int<64>)> @MakeTree(%depth)
	%i2New = ADD <int<64>> %i2 1
	%forLoop2Cond = SLT <int<64>> %i2New %iNumIters
	BRANCH2 %forLoop2Cond %forLoop2 %afterForLoop2
	
	.label %afterForLoop2:
	RETVOID
}

.funcdef @main <int<32> (void)> {
	.label %entry:
	BRANCH %body1
	
	.label %body1:
	// stretch the memory space quickly
	%tempTree = CALL <ref<@Node> (int<64>)> @MakeTree(@kStretchTreeDepth)
	
	// create a long lived object
	%longLivedTree = NEW <@Node>
	CALL <void (int<64> ref<@Node>)> @Populate (@kLongLivedTreeDepth, %longLivedTree)
	
	// create long-lived array, filling half of it
	%array = NEW <array<double 500000>>
	%irefArray = GETIREF <array<double 500000>> %array
	BRANCH %fillingArray
	
	.label %fillingArray:
	%i = PHI <int<64>> (%body1: 0; %fillingArray: %iNew;)
	%irefElem = GETELEM <array<double 500000>> %irefArray %i
	%if = SITOFP <int<64> double> %i
	%v = FDIV <double> 1.0 %if
	STORE <double> %v %irefElem
	%iNew = ADD <int<64>> %i 1
	%cond = SLT <int<64>> %iNew 250000
	BRANCH2 %cond %fillingArray %body2
	
	.label %body2:
	%d = PHI <int<64> (%fillingArray: @kMinTreeDepth; %body2: %dNew;)
	CALL <void (int<64>)> @TimeConstruction(%d)
	%dNew = ADD <int<64>> %d 2
	%cond2 = SLE <int<64>> %d @kMaxTreeDepth
	BRANCH2 %cond2 %body2 %check
	
	.label %check:
	%check1 = EQ <ref<@Node>> %longLivedTree 0
	BRANCH2 %check1 %fail %nextCheck
	
	.label %nextCheck:
	%irefElem1000 = GETELEM <array<double 500000>> %irefArray 1000
	%supposedValue = FDIV 1.0 1000.0
	%check2 = FUNE <double> %irefElem1000 %supposedValue
	BRANCH2 %check2 %fail %end
	
	.label %fail:
	RET <int<32>> 0
	
	.label %end:
	RET <int<32>> 1
}