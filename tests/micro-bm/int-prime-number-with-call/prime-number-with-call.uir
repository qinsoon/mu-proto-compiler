// prime-number-with-call

.funcdef @isPrime <int<32> (int<64>)> {
  .label %entry:
  %a = PARAM 0
  %cmp5 = SGT <int<64>> %a 2
  BRANCH2 %cmp5 %for.body %return1

  .label %for.cond:
  %cmp = SLT <int<64>> %inc %a
  BRANCH2 %cmp %for.body %return1
  
  .label %for.body:
  %i.06 = PHI <int<64>> {%for.cond:%inc ; %entry: 2;}
  %rem = SREM <int<64>> %a %i.06
  %cmp1 = EQ <int<64>> %rem 0
  %inc = ADD <int<64>> %i.06 1
  BRANCH2 %cmp1 %return0 %for.cond
  
  .label %return1:
  RET <int<32>> 1
  
  .label %return0:
  RET <int<32>> 0
}

.funcdef @main <int<32> ()> {
  .label %entry:
  BRANCH %body
  
  .label %body:
  %i.02 = PHI <int<64>> {%entry: 2; %body: %4;}
  %sum.01 = PHI <int<32>> {%entry: 0; %body: %3;}
  %2 = CALL <int<32> (int<64>)> @isPrime(%i.02)
  %3 = ADD <int<32>> %2 %sum.01
  %4 = ADD <int<64>> %i.02 1
  %exitcond = EQ <int<64>> %4 100001
  BRANCH2 %exitcond %ret %body
  
  .label %ret:
  RET <int<32>> %3
}